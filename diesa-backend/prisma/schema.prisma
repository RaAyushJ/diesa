generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:[Test123ijklnugtfthgv]@db.qpaiayzvygktmmbivkts.supabase.co:5432/postgres?sslmode=require&sslaccept=unauthorized"


}


// This model now represents additional user data, linked to Supabase's own auth table.
model Profile {
  // This ID MUST match the ID of a user in Supabase's `auth.users` table.
  id          String       @id @db.Uuid
  email       String       @unique
  fullName    String?
  createdAt   DateTime     @default(now())
  enrollments Enrollment[]

  @@map("profiles") // Maps this model to a table named "profiles"
}

// NOTE: The `User` model is gone. Supabase handles it.
// We also need to update the Enrollment model to point to `Profile` instead of `User`.

model Enrollment {
  id           String   @id @default(uuid())
 
  user         Profile  @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     Int
  purchaseDate DateTime @default(now())
  startDate    DateTime
  planType     PlanType
  status       EnrollmentStatus @default(pending_setup)
  paymentId    String
  progress     TaskProgress[]
}

model Course {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Int // stored in paise
  durationDays Int
  enrollments  Enrollment[]
  syllabus     SyllabusItem[]
}
model SyllabusItem {
  id        Int    @id @default(autoincrement())
  course    Course @relation(fields: [courseId], references: [id])
  courseId  Int
  dayNumber Int
  itemId    Int // FK to content_items.id
  itemType  String
  itemOrder Int

  progress TaskProgress[]
}

model ContentItem {
  id                 Int                @id @default(autoincrement())
  title              String
  contentType        ContentType
  contentBody        Json
  languageFluencyTag LanguageFluencyTag
}

model TaskProgress {
  id               Int          @id @default(autoincrement())
  enrollment       Enrollment   @relation(fields: [enrollmentId], references: [id])
  enrollmentId     String
  syllabusItem     SyllabusItem @relation(fields: [syllabusItemId], references: [id])
  syllabusItemId   Int
  status           TaskStatus   @default(pending)
  timeSpentSeconds Int          @default(0)
  completedAt      DateTime?
  assignedDate     DateTime
}

enum PlanType {
  weekday_centric
  weekend_centric
}

enum EnrollmentStatus {
  pending_setup
  active
  completed
  expired
}

enum TaskStatus {
  pending
  in_progress
  completed
  backlogged
}

enum AuthProvider {
  email
  google
}

enum ContentType {
  article
  problem
}

enum LanguageFluencyTag {
  java
  cpp
  python
  all
}
